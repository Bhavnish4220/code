#include <AFMotor.h>

#define trigPin1 A0
#define echoPin1 A1
#define trigPin2 A2
#define echoPin2 A3
#define trigPin3 A4
#define echoPin3 A5

#define motor1Pin1 4
#define motor1Pin2 5
#define motor2Pin1 6
#define motor2Pin2 7

#define safeDistance 30
#define avoidDistance 15

AF_DCMotor motor1(1);
AF_DCMotor motor2(2);

void setup() {
  Serial.begin(9600);
  motor1.setSpeed(250);
  motor2.setSpeed(250);
  pinMode(motor1Pin1, OUTPUT);
  pinMode(motor1Pin2, OUTPUT);
  pinMode(motor2Pin1, OUTPUT);
  pinMode(motor2Pin2, OUTPUT);
  pinMode(trigPin1, OUTPUT);
  pinMode(echoPin1, INPUT);
  pinMode(trigPin2, OUTPUT);
  pinMode(echoPin2, INPUT);
  pinMode(trigPin3, OUTPUT);
  pinMode(echoPin3, INPUT);
}

void loop() {
  long duration1, distance1;
  digitalWrite(trigPin1, LOW);
  delayMicroseconds(2);
  digitalWrite(trigPin1, HIGH);
  delayMicroseconds(10);
  digitalWrite(trigPin1, LOW);
  duration1 = pulseIn(echoPin1, HIGH);
  distance1 = duration1 * 0.034 / 2;

  long duration2, distance2;
  digitalWrite(trigPin2, LOW);
  delayMicroseconds(2);
  digitalWrite(trigPin2, HIGH);
  delayMicroseconds(10);
  digitalWrite(trigPin2, LOW);
  duration2 = pulseIn(echoPin2, HIGH);
  distance2 = duration2 * 0.034 / 2;

  long duration3, distance3;
  digitalWrite(trigPin3, LOW);
  delayMicroseconds(2);
  digitalWrite(trigPin3, HIGH);
  delayMicroseconds(10);
  digitalWrite(trigPin3, LOW);
  duration3 = pulseIn(echoPin3, HIGH);
  distance3 = duration3 * 0.034 / 2;

  delay(1000);

  Serial.print(distance1);
  Serial.print(",");
  Serial.print(distance2);
  Serial.print(",");
  Serial.println(distance3);

  if (distance1 < avoidDistance || distance2 < avoidDistance || distance3 < avoidDistance) {
    motor1.run(RELEASE);
    motor2.run(RELEASE);
    if (distance1 < avoidDistance) {
      motor1.run(FORWARD);
      delay(1000);
      motor2.run(BACKWARD);
      delay(500);
    }
    else if (distance2 < avoidDistance) {
      motor1.run(BACKWARD);
      delay(500);
      motor2.run(FORWARD);
      delay(500);
    }
    else if(distance3 < avoidDistance) {
      motor2.run(BACKWARD);
      delay(500);
      motor2.run(FORWARD);
      delay(1000);
    }
  }
  else  {
    motor1.run(FORWARD);
    motor2.run(FORWARD);
  }
  }
